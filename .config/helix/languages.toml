[[language]]
name = "python"
roots = ["pyproject.toml", "."]
language-servers = [ "pyright","ruff"]
auto-format = true
# Add this to pyproject.toml in root directory of project to add extra paths.
# [tool.pyright]
# extraPaths = ["./test"]

[[language]]
name = "verilog"
auto-format = true
formatter = { command = 'verible-verilog-format', args = ["--wrap_spaces","3","--indentation_spaces","3","-"] }
language-servers = ["veridian"]
indent = { tab-width = 3, unit = "   " }

[[language]]
name = "nix"
formatter = { command = 'nixfmt', args = [] }
language-servers = ["nixd"]
auto-format = true

[[language]]
name = "scala"
auto-format = true

[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }
language-servers = [
  "html-preview-lsp"
]

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }

[[language]]
name = "java"
language-servers =[
  "jdtls",
  # "lsp-ai"
]
formatter = { command = "google-java-format", args = ["-"] }
auto-format = true

[[language]]
name = "javascript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "typescript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "markdown"
formatter = { command = 'prettier', args = ["--parser", "markdown"] }
language-servers = [
  "marksman",
  # "mdpls",
  # "markdown-oxide",
  # "typos",
  # "vale",
  # "ltex"
]
# auto-format = true

[[language]]
name = "toml"
auto-format = false

[[language]]
name = "cpp"
# auto-format = true
language-servers = ["clangd"]
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "c"
auto-format = true
language-servers = ["clangd"]
indent = { tab-width = 4, unit = "    " }
# Diagnostics:
#   Suppress: "pp_including_mainfile_in_preamble"
# Add above codes into the .clangd file under your project directory.
# Create compile_commands.json using this: ` cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..`

[[language]]
name = "latex"
language-servers = ["texlab"]
auto-format = true

[[language]]
name = "rust"
auto-format = false
[language.formatter]
command = "rustfmt"

[[language]]
name = "gas"
scope = "source.llvm"
roots = ["Makefile"]
file-types = ["S", "s"]
comment-token = "#"
indent = { tab-width = 4, unit = "    " }
language-servers = ["asm-lsp"]
auto-format = true

[[language]]
name = "git-commit"
language-servers = [
  "typos",
  "vale",
  "ltex",
]






[language-server.rust-analyzer.config.check]
command = "clippy"

[language-server.clangd]
command = "clangd"
# args = ['--fallback-style=Webkit', '--clang-tidy']
args = [
  "--background-index",
  "--clang-tidy",
  "--all-scopes-completion",
  "--completion-style=detailed",
  "--header-insertion=iwyu",
  "--function-arg-placeholders",
  "--pch-storage=memory",
  "--offset-encoding=utf-8",
  "--fallback-style=LLVM",
  "--compile-commands-dir=build"]

[language-server.texlab]
command = "texlab"
cleanArtifacts = true

[language-server.texlab.config.texlab.build]
args = ["-shell-escape", "-pdf", "-interaction=nonstopmode", "-synctex=1", "%f"]
onSave = true
forwardSearchAfter = true


[language-server.texlab.config.texlab.forwardSearch]
executable = "sioyek"
args = [
    "--reuse-window",
    "--nofocus",
    "--execute-command",
    "toggle_synctex",
    "--inverse-search",
    "texlab inverse-search -i \"%%1\" -l %%2",
    "--forward-search-file",
    "%f",
    "--forward-search-line",
    "%l",
    "%p",  
]

[language-server.texlab.config.texlab.chktex]
onEdit = true


[language-server.veridian]
command = "veridian"

[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.nixd]
command = "nixd"

# [language-server.gpt]
# command = "helix-gpt"
# args = ["--handler","codeium","--logFile","/tmp/helix-gpt.log"]

[language-server.vale]
command = "vale-ls"

[language-server.typos]
command = "typos-lsp"

[language-server.ltex]
command = "ltex-ls"

[language-server.mdpls]
command = "mdpls"
config = { markdown.preview.serveStatic = true, markdown.preview.codeTheme = "github", markdown.preview.auto = true, markdown.preview.browser = "firefox" }

[language-server.html-preview-lsp]
command = "html-preview-lsp"

[language-server.jdtls]
command = "jdtls"
args = [
  "-data", "/home/emre/.cache/jdtls/workspace", # WARNING: abs path
  "-configuration", "/home/emre/.cache/jdtls/config", # WARNING: abs path
]

[language-server.jdtls.config.java]
"jdt.ls.vmargs" = "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx8G -Xms1G -XX:+UseG1GC -XX:+UseStringDeduplication"
"contentProvider.preferred" = "fernflower"
"signatureHelp.enabled" = true
"completion.favoriteStaticMembers" = [
  "org.junit.Assert.*",
  "org.junit.Assume.*",
  "org.junit.jupiter.api.Assertions.*",
  "org.junit.jupiter.api.Assumptions.*",
  "org.junit.jupiter.api.DynamicContainer.*",
  "org.junit.jupiter.api.DynamicTest.*",
]
"completion.importOrder" = ["java", "javax", "com", "org"]
"sources.organizeImports.starThreshold" = 9999
"sources.organizeImports.staticStarThreshold" = 9999
"codeGeneration.useBlocks" = true
"codeGeneration.generateComments" = false
"server.launchMode" = "Standard"


# [language-server.lsp-ai]
# command = "lsp-ai"
# timeout = 60
# [language-server.lsp-ai.config]
# memory.file_store = {}
# models.model1.type = "ollama"
# models.model1.chat_endpoint = "http://127.0.0.1:11434/api/chat"
# models.model1.generate_endpoint = "http://127.0.0.1:11434/api/generate"
# # models.model1.model = "starcoder2:15b" # not enough ram
# # models.model1.model = "deepseek-r1:1.5b" # trash
# # models.model1.model = "deepseek-r1:7b" # thinking takes time
# # models.model1.model = "deepseek-r1:8b" # thinking takes time
# # models.model1.model = "opencoder:8b" # ok
# # models.model1.model = "codellama:7b" # ok
# # models.model1.model = "codegemma:7b" # ok
# models.model1.model = "yi-coder:9b" # good
# # models.model1.model = "qwen2.5-coder:14b-instruct-q6_K" # great, but slow
# # models.model1.model = "deepseek-coder:6.7b" # not tested
# # models.model1.model = "qwen2.5-coder:7b" # not tested

# # completion.model = "model1"
# # completion.parameters.max_context = 4096
# # completion.parameters.options.num_predict = 64
# # completion.parameters.options.stop = ["\n"]
# # [[language-server.lsp-ai.config.actions]]
# # action_display_name = "Complete"
# # model = "model1"
# # parameters.max_context = 4096
# # parameters.options.num_predict = 512
# # # parameters.options.stop = ["<file_sep>", "\n\n"]
# # [[language-server.lsp-ai.config.actions]]
# # action_display_name = "FIM Complete"
# # model = "model1"
# # parameters.max_context = 4096
# # parameters.fim.start = "<｜fim▁begin｜>"
# # parameters.fim.middle = "<｜fim▁hole｜>"
# # parameters.fim.end = "<｜fim▁end｜>"
# # parameters.fim.start = "<fim_prefix>"
# # parameters.fim.middle = "<fim_middle>"
# # parameters.fim.end = "<fim_suffix>"
# # parameters.options.num_predict = 512
# # parameters.options.stop = ["<file_sep>", "\n\n"]
# [[language-server.lsp-ai.config.actions]]
# action_display_name = "Complete Via Prompt"
# model = "model1"
# parameters.max_context = 4096
# parameters.options.num_predict = 512
# parameters.system = "Be practical. Do not explain unless asked to. Short, concise and complete answers."
# parameters.messages = [
#     { role = "user", content = "{CODE}" }
# ]
# # post_process.extractor = "(?s)<answer>(.*?)</answer>"

# # [[language-server.lsp-ai.config.chat]]
# # trigger = "!C"
# # action_display_name = "Chat"
# # model = "model1"
# # parameters.max_context = 4096
# # parameters.max_tokens = 1024
# # parameters.messages = [
# #   { "role" = "system", "content" = "You are a code assistant chatbot. The user will ask you for assistance coding and you will do you best to answer succinctly and accurately" }
# # ]


# [language-server.dls]
# command = "diagnostic-languageserver"
# args = [ "--stdio", "--log-level=2" ]
# [language-server.dls.config.filetypes]
# verilog = "verilator"
# systemverilog =  "verilator"
# [language-server.dls.config.linters.verilator]
# command= "sh"
# args= [
#     "-c",
#     "verilator --lint-only -Wall $(find . -type f -name '*.*' | xargs -n1 dirname | sort -u | awk '{print \"-I\" $0}') %file 2>&1 | grep %file"
# ]
# isStdout = true
# isStderr = false
# sourceName = "verilator"
# # onSaveOnly = true -- DLS never receives onDidSave event.
# #  See:
# #    https://github.com/helix-editor/helix/issues/9034
# #    https://github.com/helix-editor/helix/pull/9101
# debounce = 1000
# formatLines = 1
# formatPattern= [
#     "^(%(Warning|Error)[^:]*:)?\\s*([^:]+):(\\d+):(\\d+)?:?\\s*(\\.\\.\\.)?\\s*(.*)$",
#     {line = 4, column = 5, message= [ 7 ], security= 2}
# ]
# securities= {Error = "error", Warning= "warning", undefined= "info"}


