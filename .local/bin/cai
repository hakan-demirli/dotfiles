#!/usr/bin/env python3
import re
import sys


def align_parentheses(processed_code):
    lines = processed_code.split("\n")
    max_len = max(len(line.split("(")[0]) for line in lines if "(" in line)
    aligned_code = ""
    for line in lines:
        if "(" in line:
            before, after = line.split("(", 1)
            aligned_code += before.ljust(max_len) + "(" + after + "\n"
        else:
            aligned_code += line + "\n"
    return aligned_code


def process_verilog(verilog_code):
    """
    Creates verilog instantiation from module definition.

    Args:
      verilog_code: The Verilog code module definition.

    Returns:
      The instantiation of the module Verilog code.
    """

    # Remove empty lines
    processed_code = re.sub(r"\n\s*\n", "\n", verilog_code, re.MULTILINE)

    # Remove module keyword.
    processed_code = re.sub(r"module\s+", "", processed_code)

    # Remove data types and ranges.
    processed_code = re.sub(r"output\s+", "", processed_code)
    processed_code = re.sub(r"input\s+", "", processed_code)
    processed_code = re.sub(r"inout\s+", "", processed_code)
    processed_code = re.sub(r"reg\s+", "", processed_code)
    processed_code = re.sub(r"wire\s+", "", processed_code)
    processed_code = re.sub(r"\[[^\]]*\]\s+", "", processed_code)

    # # Add dots and parentheses to ports.
    processed_code = re.sub(r"(\w+)(,|\s*\))", r".\1(\1)\2", processed_code)

    # align
    processed_code = align_parentheses(processed_code)
    return processed_code.rstrip(",")


if __name__ == "__main__":
    verilog_code = sys.stdin.read()
    processed_code = process_verilog(verilog_code)
    print(processed_code)


"""
TODO:
    Add module name with _dut postfix.
FIX:
    module ls_unit (
        input  wire                 clk_i,    // differential clock inputs
        input  wire                 clk_n_i,  // differential clock inputs
        input  wire                 rst_i,
        output wire                 busy_o,
        // ex
        input  wire                 we_i,
        input  wire                 re_i,
        input  wire [         31:0] adr_i,
        input  wire [         31:0] data_i,
        output reg  [         31:0] data_o,
        // dram
        output wire                 cke,      // clock enable
        output wire                 cs_n,     // chip select
        output wire                 ras_n,    // row address strobe
        output wire                 cas_n,    // column address strobe
        output wire                 we_n,     // write enable
        output wire [  DM_BITS-1:0] dm_tdqs,  // 
        output wire [  BA_BITS-1:0] ba,       // bank address 
        output wire [ADDR_BITS-1:0] addr,     // address
        inout  wire [  DQ_BITS-1:0] dq,       // data inout
        inout  wire [ DQS_BITS-1:0] dqs,      // data strobe differential
        inout  wire [ DQS_BITS-1:0] dqs_n,    // data strobe differential
        input  wire [ DQS_BITS-1:0] tdqs_n,   // Termination data strobe
        output                      odt       // 
    );
"""
