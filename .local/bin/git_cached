#!/usr/bin/env python3
import argparse
import logging
import os
import shutil
import subprocess
import sys
from urllib.parse import urlparse

GIT = "git"


def setup_logger():
    cache_dir = create_cache_dir()
    log_file = os.path.join(cache_dir, "git_cache.log")
    logging.basicConfig(
        filename=log_file,
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )


def create_cache_dir():
    xdg_cache_dir = os.environ.get("XDG_CACHE_HOME", os.path.expanduser("~/.cache"))
    cache_dir = os.path.join(xdg_cache_dir, "git_cache")
    os.makedirs(cache_dir, exist_ok=True)
    return cache_dir


def run_git(cmd_args, cwd=None, ignore_unshallow_error=False):
    try:
        result = subprocess.run(
            [GIT] + cmd_args,
            check=True,
            cwd=cwd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        output = (e.stdout or "") + (e.stderr or "")
        if (
            ignore_unshallow_error
            and "fatal: --unshallow on a complete repository does not make sense"
            in output
        ):
            return output
        else:
            sys.stderr.write(output)
            sys.exit(e.returncode)


def gitc_clone(
    url, depth=None, branch=None, extra_args=None, dst_path=None, original_args=None
):
    """
    Clones the repository using a cache. If the destination already exists,
    delegate to the underlying Git command to produce its standard error message.
    """
    extra_args = extra_args or []
    cache_dir = create_cache_dir()

    # Normalize URL by stripping trailing .git if present.
    if url.endswith(".git"):
        url = url[:-4]

    parsed_url = urlparse(url)
    path_parts = parsed_url.path.strip("/").split("/")
    if len(path_parts) < 2:
        # If URL is not in the expected form, delegate to Git.
        subprocess.run([GIT] + original_args)
        return

    # Build cache paths.
    website_dir = os.path.join(cache_dir, parsed_url.netloc)
    os.makedirs(website_dir, exist_ok=True)
    user_dir = os.path.join(website_dir, path_parts[-2])
    os.makedirs(user_dir, exist_ok=True)
    repo_dir = os.path.join(user_dir, path_parts[-1])

    # Update or create the cached repository.
    if os.path.exists(repo_dir):
        run_git(["-C", repo_dir, "fetch", "--unshallow"], ignore_unshallow_error=True)
        run_git(["-C", repo_dir, "pull"])
        run_git(["-C", repo_dir, "submodule", "update", "--recursive"])
        logging.info("Repository cache exists; updated cache repository.")
    else:
        clone_cmd = ["clone", "--recurse-submodules", "-j8"]
        if branch:
            clone_cmd += ["-b", branch]
        if depth:
            clone_cmd += ["--depth", str(depth)]
        clone_cmd += extra_args + [url, repo_dir]
        run_git(clone_cmd)
        logging.info("Repository cache created.")

    if branch:
        run_git(["-C", repo_dir, "checkout", branch])
        run_git(["-C", repo_dir, "pull"])
        logging.info("Checked out branch '%s' in cache.", branch)

    # Determine the destination directory.
    dst_dir = (
        os.path.join(os.getcwd(), path_parts[-1]) if dst_path is None else dst_path
    )

    # If the destination already exists, delegate to Git so that Git produces its error.
    if os.path.exists(dst_dir):
        subprocess.run([GIT] + original_args)
        return

    # Copy from the cache into the destination.
    shutil.copytree(repo_dir, dst_dir)
    logging.info("Copied repository to destination %s.", dst_dir)
    if branch:
        run_git(["-C", dst_dir, "checkout", branch])


def parse_clone_args(args):
    parser = argparse.ArgumentParser(prog="git clone", add_help=False)
    parser.add_argument("--depth", type=int, default=None)
    parser.add_argument("-b", "--branch", dest="branch", default=None)
    parser.add_argument("url", nargs="?", default=None)
    parser.add_argument("dst", nargs="?", default=None)
    parsed, unknown = parser.parse_known_args(args)
    return parsed.depth, parsed.branch, parsed.url, parsed.dst, unknown


def git_command(args):
    # For any non-clone command, simply delegate to Git.
    if not args or args[0] != "clone":
        subprocess.run([GIT] + args)
        return

    # Parse clone arguments.
    clone_args = args[1:]
    depth, branch, url, dst, unknown = parse_clone_args(clone_args)
    # If URL is missing or there are unknown arguments, delegate to Git.
    if url is None or unknown:
        subprocess.run([GIT] + args)
        return

    # Call our caching clone function and pass the original clone arguments
    # so that we can delegate error-handling if necessary.
    gitc_clone(url, depth, branch, extra_args=unknown, dst_path=dst, original_args=args)


def main():
    setup_logger()
    git_command(sys.argv[1:])


if __name__ == "__main__":
    main()
