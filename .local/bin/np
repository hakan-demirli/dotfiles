#!/usr/bin/env python3

import os
import random
import shutil
import string
import subprocess
from pathlib import Path

# Check if git_cached exists in the path or in ~/.local/bin/
git_cached = shutil.which("git_cached")
if git_cached is None:
    git_cached = os.path.expanduser("~/.local/bin/git_cached")
    if not os.path.exists(git_cached):
        git_cached = None
GIT = "git" if git_cached is None else git_cached

"""
np: new project
copy a template project to current dir.
"""


def run_fzf_inside_cache_and_copy(tmp_dir):
    tmp_dir = Path(tmp_dir)

    try:
        cmd = f"find -L {tmp_dir} -maxdepth 1 -name .git -prune -o -type d -print | fzf"
        result = subprocess.run(cmd, stdout=subprocess.PIPE, shell=True)
        selected_directory = result.stdout.decode().strip()

        if selected_directory:
            selected_path = Path(selected_directory)
            print(f"Selected directory: {selected_path}")

            # Copy the selected directory to the current working directory
            destination = Path.cwd() / selected_path.name
            shutil.copytree(selected_path, destination)
            print(f"Directory copied to: {destination}")

        else:
            print("No directory selected.")

    except subprocess.CalledProcessError as e:
        print(f"Error while running fzf: {e}")


if __name__ == "__main__":
    repo_url = "https://github.com/hakan-demirli/code_templates"

    random_string = "".join(
        random.choice(string.ascii_letters + string.digits) for _ in range(32)
    )
    dir_name = "np_" + random_string
    tmp_dir = os.path.join("/tmp", dir_name)
    subprocess.run([GIT, "clone", "--depth", "1", repo_url, tmp_dir])
    run_fzf_inside_cache_and_copy(tmp_dir)
